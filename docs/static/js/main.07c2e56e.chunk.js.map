{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAmBhD,OACE,0BAAMC,SAZa,SAACC,GACpBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OAExCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCJdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACN,mCACTC,EAFe,uDAGjBC,UAAUH,GAHO,6BACN,oCADM,SAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAIFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdjB,kBAkBdM,GAlBc,4CAAH,sDCFPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGnC,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,+BAAKA,EAAL,OCJOO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECEb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAoBxC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDnB2BK,CAAa1B,GAAjCa,EAHyB,EAG/BN,KAAca,EAHiB,EAGjBA,QAEtB,OACE,oCACE,wBAAIJ,UAAU,qCAAqChB,GAClDoB,GAAW,yCACZ,yBAAKJ,UAAU,aACZH,EAAOJ,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UEX3BkB,EAAe,WAAO,IAAD,EACI1C,mBAAS,CAAC,cADd,mBACzB2C,EADyB,KACb5C,EADa,KAGhC,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACG4C,EAAWpB,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,U,MCR5C8B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.07c2e56e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setinputValue] = useState('');\n\n  // Mantener el inputValue actualizado con el input\n  const handleInputChange = (e) => {\n    setinputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Confirmar que se ingreso al menos dos letras (.trim borra espacios)\n    // y agregar nuevo elemento con la funcion heredada \"setCategories\"\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      // Limpiar el input al hacer submit (Enter)\n      setinputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\n// Funcion para enviar un warning si no se envia la funcion \"PropTypes\"\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","// Funcion que regresa una Promesa que incluye la coleccion\n// de imagenes \"gifs\" de la categoria solicitada\n\n// encodeURI remplaza los espacios para que no de errores\nexport const getGifs = async (category) => {\n  const apiKey = 'sGucR6IAiWVP2Mmu1CPllkKTkHZFvGt7';\n  const url = `https://api.giphy.com/v1/gifs/search?q=\n    ${encodeURI(category)}&limit=10&api_key=${apiKey}`;\n  const resp = await fetch(url);\n  // Extraer \"data\" dentro del array, es recibido en formato json\n  const { data } = await resp.json();\n\n  // Crear nuevos arreglos con informacion especifica: id,title y url\n  // colocamos \"?\" en \"images?\" para utilizar solo si existe el url\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ title, url }) => {\n  //   console.log(id, title, url);\n\n  return (\n    <div className='card animate__animated animate__fadeIn'>\n      <img src={url} alt={title} />\n      <p> {title} </p>\n    </div>\n  );\n};\n\n// { id, title, url } recibimos el objeto destructurandolo\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n  // Utilizar la funcion hook: useFetchGifs, destructurando\n  // la informacion recibida y cambiando nombre de data a images\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className='animate__animated animate__bounce'>{category}</h3>\n      {loading && <p>Loading...</p>}\n      <div className='card-grid'>\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\n// {...img} mandamos cada una de las propiedades, como una\n// propiedad independiente {id, title, url}\n","// A las funciones HOOK se le antepone un \"use\"\n// El useState le indica a otros componentes de React\n// que se rendericen cuando algo cambia\nimport { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  // Con useEffect() con []: La funcion interna solo se ejecuta cuando\n  // el componente es renderisado por primera ves, esta funcion esta\n  // el helper => getGift, al colocar [category], tambien se ejecuta\n  // cuando cambie el valor de la categoria\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state; // { data:[], loading: true };\n};\n\n// El state es la imformacion que se encuentra dentro del useState\n// El setState actualiza la informacion\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['One Punch']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}